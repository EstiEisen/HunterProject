import { Component, OnInit, Input } from '@angular/core';
import { Router} from '@angular/router';

import { UserSessionService } from '../../../shared/_services/user-session.service';
import { EmployerService } from '../../_services/http/employer.service';

import { MONTHS } from '../../../shared/_const/months';
import { Employer } from '../../../shared/_models/employer.model';
import { EmployeeFeedback } from '../../../shared/_models/employee-feedback.model';

@Component({
  selector: 'app-feedback-graph',
  templateUrl: './feedback-graph.component.html',
  styleUrls: ['./feedback-graph.component.css']
})
export class FeedbackGraphComponent implements OnInit {

  @Input() graphOnly = false;

  constructor(private router: Router, private userSession: UserSessionService, private employerService: EmployerService) {}

  feedback = new EmployeeFeedback();

  employers: Employer[] = [];

  readonly months = MONTHS;
  readonly currentYear = new Date().getFullYear();

  readonly searchCriteria = { employer: '', year: this.currentYear, months: []};

  readonly chartOptions = {
    scaleShowVerticalLines: false,
    responsive: true,
    scales: {
      xAxes: [{
        stacked: true
      }]
    },
    legend: {
      position: 'bottom'
    }
  };

  readonly chartLabels = ['2006', '2007', '2008', '2009', '2010', '2011', '2012'];

  readonly chartData = [
    { data: [28, 28, 20, 12, 56, 12, 40], label: 'לא נפרעו',  },
    { data: [55, 55, 40, 21, 86, 34, 55], label: 'נפרעו חלקית' },
    { data: [100, 100, 60, 32, 106, 65, 90], label: 'נפרעו' }
  ];

  readonly chartColors = [{
      backgroundColor: 'rgba(87, 189, 190, 1)'
    },
    {
      backgroundColor: 'rgba(251, 103, 131, 1)'
    },
    {
      backgroundColor: 'rgba(249, 197, 135, 1)'
  }];

  ngOnInit() {
    this.employerService.getEmployers(this.userSession.getToken()).then(response => this.employers = response);
  }

  setMonths(values: string[]): void {
    for (let i = 0; i < values.length; i++) {

      this.searchCriteria.months.push(this.months[i]);

      if (values[i] === 'full') {
        this.searchCriteria.months = ['full'];

        for (let a = 0; a < this.months.length; a++) {
          this.searchCriteria.months.push(this.months[a]);
        }

        break;
      }
    }
  }

  chartClicked(e: { event: MouseEvent, active: any[]}): void {
    let sectionClicked;

    const yCords = [];

    for (let i = 0; i < e.active.length; i++) {
      yCords[e.active[i]._model.y] = e.active[i]._model.datasetLabel;
    }

    for (const i in yCords) {
      if (e.event.offsetY >= +i) {
        sectionClicked = yCords[i];
      }
    }

    const status = this.feedback.getStatusLabels(sectionClicked, 'value');
    const company = e.active[0]._model.label;

    this.router.navigate(['/feedback/table/employees'], { queryParams: {
      employer: this.searchCriteria.employer,
      year: this.searchCriteria.year,
      months: JSON.stringify(this.searchCriteria.months),
      status: status,
      company: company
    }
    });

  }
}
