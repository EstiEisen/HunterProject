import { Component, OnInit, Input } from '@angular/core';
import { MatDialog } from '@angular/material';

import { TransmissionIntroFormComponent } from '../transmission-intro-form/transmission-intro-form.component';
import { TransmissionProductDetailsComponent } from './transmission-product-details/transmission-product-details.component';

import { UserSessionService } from '../../../shared/_services/user-session.service';
import { ProcessService } from '../../_services/http/process.service';

import { Process } from '../../../shared/_models/process.model';
import { EmployeePayment } from '../../../shared/_models/employee-payment.model';
import { TransmissionData } from '../../../shared/_models/transmission-data.model';
import { TransmissioBankDetailsComponent } from './transmissio-bank-details/transmissio-bank-details.component';
import { TransmissioCommentComponent } from './transmissio-comment/transmissio-comment.component';

@Component({
  selector: 'app-process-transmission',
  templateUrl: './process-transmission.component.html',
  styleUrls: ['./process-transmission.component.css']
})
export class ProcessTransmissionComponent implements OnInit {

  @Input() process: Process;
  
  payments: EmployeePayment[] = [];
  pay = new EmployeePayment;

  public checklist: { fileId: number }[] = [{ fileId : 0 }];
  
  public checkBoxValue: boolean = true;//select all in table
  
  constructor(private dialog: MatDialog, private userSession: UserSessionService, private processService: ProcessService) {}

  ngOnInit() {
    if (this.process.stepStatus !== 1) {
      setTimeout(() => this.setDialog(), 0);      
    }
  }

  private setDialog(): void {
    const dialog = this.dialog.open(TransmissionIntroFormComponent, {
      disableClose: true
    });

    dialog.afterClosed().subscribe(data => this.launchTransmission(data));
  }

  private launchTransmission(data: TransmissionData): void {
    
    this.processService.launchTransmission(this.process.id, data, this.userSession.getToken()).then(response => {
      this.payments = response['data'];
      this.initChecklist(response['data'])});
  }

  initChecklist(data){
    for (var i = 0; i < data.length; i++) {
      this.checklist.push({ fileId: data[i].id });
    }
  }

  IndexList(i) {
    let x = this.checklist.filter(x => x.fileId == i);
    if (x.length == 0) {
      this.checklist.push({ fileId: i });
    }
    else
      this.checklist.splice(this.checklist.findIndex(x => x.fileId === i), 1)
  }
  
  clearSelectAllIndexList() {
    if (this.checkBoxValue) {
      for (var i = 0; i < this.payments.length; i++) {
        this.checklist.push({ fileId: this.payments[i].fileId });
      }
    }
    else {
      this.checklist = [{ fileId: 0 }];
    }
  }

  openProductDetailsDialog(paymentID: number): void {
    this.dialog.open(TransmissionProductDetailsComponent, {
      data: paymentID
    });
  }

  openBankDetailsDialog(payment: EmployeePayment): void {
    let payDetails : { file: EmployeePayment, process: Process } = { file : payment,process: this.process};
    this.dialog.open(TransmissioBankDetailsComponent, {
      data: payDetails,
      width: '94%'
    });
  }

openCommentDialog(payment: EmployeePayment): void {
  this.dialog.open(TransmissioCommentComponent, {
    data: payment,
  });
}

  SendDetails() {
    // if (this.payments.length > 0) {
    //   this.checklist.splice(this.checklist.findIndex(x => x.fileId === 0), 1)
    // }
    // let body = {
    //   processId: sessionStorage.getItem("processNumber"),
    //   AutoID: this.payments[0].AutoID,
    //   MonthsPays: this.checklist,
    // };

    // this.apiService.post(this.apiEndPoint, body).then(res => {
    //   this.callApi();//refreh view
    // })
    // .catch(err=> {
    //   this.commonService.errorAlert(err["_body"]);
    //   this.callApi();//refreh view
    // });
  }
}
