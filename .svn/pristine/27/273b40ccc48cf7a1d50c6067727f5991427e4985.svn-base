import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import 'rxjs/add/operator/toPromise';

import { BaseHttpService } from '../../../shared/_services/http/base-http.service';

import { Process } from '../../../shared/_models/process.model';
import { ProcessDetails } from '../../../shared/_models/process-details.model';
import { ProductPayment } from '../../../shared/_models/product-payment.model';
import { DataTableOrderCriteria } from '../../../shared/_models/data-table/data-table-order-criteria.model';
import { TransmissionData } from '../../../shared/_models/transmission-data.model';
import { EmployeePayment } from '../../../shared/_models/employee-payment.model';

@Injectable()
export class ProcessService extends BaseHttpService {

  readonly endPoint = this.apiUrl + '/process';

  constructor(private http: HttpClient) {
    super();
  }

  getProcess(processID: number, token: string): Promise<Process> {
    return this.http.get(this.endPoint + '/' + processID, this.getTokenHeader(token)).toPromise().then(response => response as Process);
  }

  getProcesses(token: string, searchCriteria?: Object, orderCriteria?: DataTableOrderCriteria): Promise<Process[]> {
    const options = this.getTokenHeader(token);
    options['params'] = Object.assign(searchCriteria, orderCriteria);

    return this.http.get( this.apiUrl + '/process',  options).toPromise().then(
      response => response as Process[]
    );
  }

  getProcessDetail(processID: number, token: string): Promise<ProcessDetails> {
    return this.http.get( this.endPoint + '/' + processID + '/details', this.getTokenHeader(token)).toPromise().then(response => response as ProcessDetails);
  }

  getEmployeePayments(token: string, searchCriteria: Object): Promise<Object[]> {
    const options = this.getTokenHeader(token);
    options['params'] = searchCriteria;

    return this.http.get( this.endPoint + '/employee', options).toPromise()
    .then(response => response as Object[]);
  }

  getProductPayments(token: string, processID: number, searchCriteria?: Object): Promise<Object[]> {
    const options = this.getTokenHeader(token);
    if (searchCriteria) {
      options['params'] = searchCriteria;
    }

    return this.http.get( this.endPoint + '/' + processID + '/product', options).toPromise()
    .then(response => response as ProductPayment[]);
  }

  launchTransmission(processID: number, data: TransmissionData, token: string): Promise<EmployeePayment[]> {
    return this.http.post( this.endPoint + '/' + processID + '/transmission', data, this.getTokenHeader(token)).toPromise()
      .then(response => response as EmployeePayment[]);
  }
}
