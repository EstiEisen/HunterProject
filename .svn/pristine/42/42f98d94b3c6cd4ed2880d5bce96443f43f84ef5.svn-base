import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

import { DataTableComponent } from '../../shared/data-table/data-table.component';

import { UserSessionService } from '../../shared/_services/user-session.service';
import { ProcessService } from '../_services/http/process.service';
import { ProcessFileService } from '../_services/http/process-file.service';
import { EmployerService } from '../_services/http/employer.service';

import { DataTableHeader } from '../../shared/_models/data-table/data-table-header.model';
import { Employer } from '../../shared/_models/employer.model';

import { MONTHS } from '../../shared/_const/months';

@Component({
  selector: 'app-process-table',
  templateUrl: './process-table.component.html',
  styleUrls: ['../../shared/data-table/data-table.component.css']
})
export class ProcessTableComponent extends DataTableComponent implements OnInit {

  readonly months = MONTHS;
  readonly currentYear = new Date().getFullYear();

  employers: Employer[];

  readonly headers: DataTableHeader[] = [
    { column: 'addToProcessName', label: 'שם תהליך' }, { column: 'id', label: 'מספר תהליך' }, { column: 'month', label: 'חודש' },
    { column: 'year', label: 'שנה' }, { column: 'codeFile', label: 'קוד' }, { column: 'totalPaymentFile', label: 'סכום' },
    { column: 'status', label: 'סטטוס' },
  ];

  searchCriteria: { employerID: number, year: number, month: number };

  constructor(protected route: ActivatedRoute, private userSession: UserSessionService, private processService: ProcessService,
              private processFileService: ProcessFileService, private employerService: EmployerService) {
    super(route);
  }

  ngOnInit() {
    this.employerService.getEmployers(this.userSession.getToken()).then(response => this.init(response));
  }

  private init(response: Employer[]): void {
    this.employers = response;
    this.searchCriteria.employerID = this.employers[0].id;
    this.searchCriteria.year = this.currentYear;
    this.fetchItems();
  }

  fetchItems(): void {
    this.processService.getProcesses(this.userSession.getToken(), this.searchCriteria, this.orderCriteria).then(response => this.setItems(response));
  }

  downloadFile(processID: number): void {
    this.processFileService.downloadProcessFile(processID, this.userSession.getToken()).then(response => console.log(URL.createObjectURL(response)));
  }

}
