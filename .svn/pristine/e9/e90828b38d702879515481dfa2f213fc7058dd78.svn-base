import {Component, OnInit, Input} from '@angular/core';
import {ActivatedRoute} from '@angular/router';
import {MatDialog} from '@angular/material';

import {DataTableComponent} from '../../../shared/data-table/data-table.component';
import {EmployeePaymentFormComponent} from '../employee-payment-form/employee-payment-form.component';

import {Employer} from '../../../shared/_models/employer.model';
import {ManualProcessService} from '../../_services/http/manual-process.service';
import {UserSessionService} from '../../../shared/_services/user-session.service';
import {Process} from '../../../shared/_models/process.model';
import {EmployeePayment} from "../../../shared/_models/employee-payment.model";
import {productTypeLable, SugTakbulLabel, WorksInSalaryLable} from "../../../shared/_const/EnumLabels";
import {MONTHS} from "../../../shared/_const/months";

@Component({
  selector: 'app-employee-payments-table',
  templateUrl: './employee-payments-table.component.html',
  styleUrls: ['./employee-payments-table.component.css']
})
export class EmployeePaymentsTableComponent extends DataTableComponent implements OnInit {

  @Input() employer: Employer;
  @Input() process: Process;

  manualProcessCreated = false;
  readonly months = MONTHS;

  constructor(protected route: ActivatedRoute,
              private dialog: MatDialog,
              private manualProcessService: ManualProcessService,
              private userSessionService: UserSessionService) {
    super(route);
  }

  ngOnInit() {
      super.ngOnInit();
  }

  fetchItems(): void {
     this.manualProcessService.getPreHafrashot(this.process, this.userSessionService.getToken())
       .then(response => this.setItems(response));
  }

  setItems(response: any): void {
    this.items = response;
    console.log(response);
  }

  makeNewPayment(): void {
    const dialogRef = this.dialog.open(EmployeePaymentFormComponent, {
      width: '700px',
      disableClose: true,
      data: {
        process: this.process// this.employer
      }
    });
    dialogRef.afterClosed().subscribe(result => {
        console.log(result);
        this.fetchItems();

    });
  }

  createNewProcess(): void {
    this.manualProcessService.newManualProcess(this.process, this.userSessionService.getToken())
      .then(response => {
        console.log(response);
        this.process = response;
        this.manualProcessCreated = true; });
  }

  convertToDate(date: string): Date{
    return new Date(date);
  }
  getMonthLable(date: string): string {
    const d: Date = new Date(date);
    return this.months[d.getMonth()];
  }

  getSugTakbulLabel(key: number): string{
    return SugTakbulLabel.get(key);
  }

  getWorksInSalary(key: number): string {
    return WorksInSalaryLable.get(key);
  }
  getProductTypeLable(key: number): string {
    return productTypeLable.get(key);
  }
}
