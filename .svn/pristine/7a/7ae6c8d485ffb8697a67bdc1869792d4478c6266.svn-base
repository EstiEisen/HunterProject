import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import 'rxjs/add/operator/toPromise';

import { BaseHttpService } from '../../../shared/_services/http/base-http.service';

import { Process } from '../../../shared/_models/process.model';
import { ProcessDetails } from '../../../shared/_models/process-details.model';
import { ProductPayment } from '../../../shared/_models/product-payment.model';
import { DataTableOrderCriteria } from '../../../shared/_models/data-table/data-table-order-criteria.model';
import { TransmissionData } from '../../../shared/_models/transmission-data.model';
import { EmployeePayment } from '../../../shared/_models/employee-payment.model';

@Injectable()
export class ProcessService extends BaseHttpService {

  readonly endPoint = this.apiUrl + '/process';

  constructor(private http: HttpClient) {
    super();
  }

  getProcess(processID: number, token: string): Promise<Process> {
    return this.http.get(this.endPoint + '/' + processID, this.getTokenHeader(token)).toPromise().then(response => response as Process);
  }

  getProcesses(token: string, searchCriteria?: Object, orderCriteria?: DataTableOrderCriteria): Promise<Process[]> {
    const options = this.getTokenHeader(token);
    options['params'] = Object.assign(searchCriteria, orderCriteria);

    return this.http.get( this.apiUrl + '/process',  options).toPromise().then(
      response => response as Process[]
    );
  }

  getProcessDetail(processID: number, token: string): Promise<ProcessDetails> {
    return this.http.get( this.endPoint + '/' + processID + '/details', this.getTokenHeader(token)).toPromise().then(response => response as ProcessDetails);
  }

  getEmployeePayments(token: string, searchCriteria: Object): Promise<Object[]> {
    const options = this.getTokenHeader(token);
    options['params'] = searchCriteria;

    return this.http.get( this.endPoint + '/employee', options).toPromise()
    .then(response => response as Object[]);
  }

  getProductPayments(token: string, processID: number, searchCriteria?: Object): Promise<Object[]> {
    const options = this.getTokenHeader(token);
    if (searchCriteria) {
      options['params'] = searchCriteria;
    }

    return this.http.get( this.endPoint + '/' + processID + '/product', options).toPromise()
    .then(response => response as ProductPayment[]);
  }

  launchTransmission(processID: number, data: TransmissionData, token: string): Promise<EmployeePayment[]> {
    return this.http.post( this.endPoint + '/' + processID + '/transmission', data, this.getTokenHeader(token)).toPromise()
      .then(response => response as EmployeePayment[]);
  }

  loadTransmissionTableData(processID: number, token: string): Promise<EmployeePayment[]> {
    return this.http.get( this.endPoint + '/' + processID + '/transmission', this.getTokenHeader(token)).toPromise()
      .then(response => response as EmployeePayment[]);
  }

  getTransmissionFileDetails(fileID: number, token: string): Promise<any[]> {
    return this.http.get( this.endPoint + '/file/' + fileID , this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  postBankNumbres(payment: any, token: string): Promise<any[]> {
    let body = {
      processId: payment.process.id,
      fileId: payment.file.id,
    };
    return this.http.post( this.apiUrl + '/bank/numbers',body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  postBankBranchNumbres(payment: any,bankNumber: number, token: string): Promise<any[]> {
    let body = {
      AutoId: payment.file.employer.id,
      bankId: bankNumber,
      fileId: payment.file.id,
    };
    return this.http.post( this.apiUrl + '/bank/branch/numbers',body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  postBankAccountNumbres(payment: any, bankNumber: number, branchNumber: number, token: string): Promise<any[]> {
    let body = {
      AutoId: payment.file.employer.id,
      bankId: bankNumber,
      branchId: branchNumber,
      fileId: payment.file.id,
    };
    return this.http.post( this.apiUrl + '/bank/account/numbers',body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  postNewBankDetails(payment: any, bankNumber: number, branchNumber: number, accountNumber : number, select:number, token: string): Promise<any[]> {
    let body = {
      AutoId: payment.file.employer.id,
      bankId: bankNumber,
      branchId: branchNumber,
      fileId: payment.file.id,
      accountNumber: accountNumber,
      selection: select-1,
    };
    return this.http.post( this.apiUrl + '/bank/final',body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  
  postNewComment(payment: any,remark: string, token: string): Promise<any[]> {
    let body = {
      processId: payment.process.id,
      remarkManualId: payment.file.id,
      remarkManualValue: remark,
      AutoID: payment.file.employer.id,
    };
    return this.http.post( this.endPoint + '/' + payment.process.id + '/comment' ,body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  postTransition(payment: any, checklist: any, token: string): Promise<any[]> {
    let body = {
      processId: payment.id,
      AutoID: payment.employer.id,
      MonthsPays: checklist,
    };
    return this.http.post( this.endPoint + '/' + payment.id + '/transmission/transmit' ,body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  postNewDateDetails(payment: any, date: string, token: string): Promise<any[]> {
    let body = {
      processId: payment.process.id,
      date: date,
      AutoID: payment.file.employer.id,
      fileId: payment.file.id,
    };
    return this.http.post( this.endPoint + '/' + payment.process.id + '/date' ,body, this.getTokenHeader(token)).toPromise()
    .then(response => response as any[]);
  }

  closeAllProcess(processId: number, paysIds: number[], close: boolean,token: string): Promise<any> {
let body = {
  processId: processId,
  MonthsPaysIds: paysIds,
  Close: close
};
return this.http.post(this.endPoint + '/closeAll', body , this.getTokenHeader(token)).toPromise()
.then(response => response)
}
}
